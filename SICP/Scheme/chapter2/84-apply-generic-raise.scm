(define (apply-generic op . args)
    (define (raise-to arg-f arg-t)
        (let ((type-f (type-tag arg-f))
              (type-t (type-tag arg-t)))
            (cond ((equal? type-f type-t) type-f)
                  ((get 'raise type-f) 
                        (raise-to ((get 'raise type-f) arg-f) arg-t))
                  (else #f)
            )
        )
    )

    (let ((type-tags (map type-tag args)))
        (let ((proc (get op type-tags)))
            (if (proc)
                (apply proc args)
                (if (= (length args) 2)
                    (let ((a1 (car args))
                          (a2 (car args)))
                        (cond ((raise-to a1 a2) (apply-generic op (raise-to a1 a2) a2))
                              ((raise-to a2 a1) (apply-generic op a1 '(raise-to a2 a1)))
                              (else (error "no methods for" (list op args)))

                          ))
                    (error "no methods for" (list op args))))
        )
    )

)