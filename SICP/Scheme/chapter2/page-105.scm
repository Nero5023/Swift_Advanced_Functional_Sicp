(define (element-of-set? x set)
    (cond ((null? set) #f)
          ((= x (car set)) #t)
          ((< x (car set)) #f)
          (else (element-of-set? x (cdr set)))
    )
)

(define (intersection-sets set1 set2)
    (if (or (null? set1) (null? set2))
            '()
            (let ((x1 (car set1))
                  (x2 (car set2)))
                (cond ((= x1 x2) (cons x1 (intersection-sets (cdr set1) (cdr set2))))
                      ((< x1 x2) (intersection-sets (cdr set1) set2))
                      ((> x1 x2) (intersection-sets set1 (cdr set2)))
                )
            )
    )    
)

