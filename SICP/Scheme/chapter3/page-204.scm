(define (adder a1 a2 sum)
    (define (process-new-value)
        (cond ((and (has-value? a1) (has-value? a2))
                (set-value! sum (+ (get-value a1) (get-value a2)) me))
              ((and (has-value? a1) (has-value? sum))
                (set-value! a2 (- (get-value sum) (get-value a1)) me))
              ((and (has-value? a2) (has-value? sum))
                (set-value! a1 (- (get-value sum) (get-value a2)) me))
          )
    )

    (define (process-forget-value)
        (forget-value! sum me)
        (forget-value! a1 me)
        (forget-value! a2 me)
        (process-new-value)
    )

    (define (me request)
        (cond ((eq? request 'I-have-a-value) 
                (process-new-value))
              ((eq? request 'I-lost-my-value) 
                (process-forget-value)
              )
              (else 
                (error "Unknown request -- ADDER" request)
              ) 
        )
    )
    (connect a1 me)
    (connect a2 me)
    (connect sum me)
me)

(define (inform-about-value constraint)
    (constraint 'I-have-a-value)
)

(define (inform-about-no-value constraint)
    (constraint 'I-lost-my-value)
)


(define (probe name connector)
    (define (print-cdoe value)
        (newline)
        (display name)
        (display " = ")
        (display value))

    (define (process-new-value)
      (print-cdoe (get-value connector)))

    (define (process-forget-value)
      (print-cdoe "?"))

    (define (me request)
        (cond ((eq? request 'I-have-a-value) 
                (process-new-value))
              ((eq? request 'I-lost-my-value) 
                (process-forget-value))
              (else
                (error "Unknown request -- PROBE" request))
        )
    )

    (connect connector me)
    me
)

(define (make-connector)
    (let ((value #f) (informant #f) (constraints '()))
        (define (set-my-value newval setter)
            (cond ((not (has-value? me)) 
                    (set! value newval)
                    (set! informant setter)
                    (for-each-except setter inform-about-value constraints))
                  ((not (= value newval)) 
                    (error "Contradiction" (list value newval)))
                  (else 
                    (error 'ignore))
              )
        )

        (define (forget-my-value retractor)
            (if (eq? retractor informant)
                (begin 
                    (set! informant #f)
                    (for-each-except retractor inform-about-no-value constraints))
                'ignore)
        )

        (define (connect new-constraint)
            (if (not (memq new-constraint constraints))
                (set! constraints (cons new-constraint constraints)))
            (if (has-value? me)
                (inform-about-value new-constraint))
            'done)

        (define (me request)
            (cond ((eq? request 'has-value?) 
                    (if informant #t #f))
                  ((eq? request 'value) value)
                  ((eq? request 'set-value) set-my-value)
                  ((eq? request 'forget) forget-my-value)
                  ((eq? request 'connect) connect)
                  (else (error "Unknown operation -- CONNECTOR" request))
              )
        )
        me
    )
)

(define (for-each-except expection procedure list)
    (define (loop items)
        (cond ((null? items) 'done)
                (else 
                    (procedure (car items))
                    (loop (cdr items))
                )
        )  
    )
    (loop list)
)

(define (has-value? connector)
  (connector 'has-value?))

(define (get-value connector)
  (connector 'value))

(define (set-value! connector new-value informant)
    ((connector 'set-value!) new-value informant)
)

(define (forget-value! connector retractor)
  ((connector 'forget) retractor))

(define (connect connector new-constraint)
  ((connector 'connect) new-constraint)
)