(define operation-table make-table) 
(define get (operation-table 'lookup-proc)) 
(define put (operation-table 'insert-proc)) 

(put 'op 'quote text-of-quotation)
(put 'op 'set! eval-assignment)
(put 'op 'define eval-definition)
(put 'op 'if eval-if)
(put 'op 'lambda (lambda (x y) (make-procedure (lambda-parameters x) (lambda-body x) y))
(put 'op 'begin (lambda (x y)  
               (eval-sequence (begin-sequence x) y))) 
(put 'op 'cond (lambda (x y)  
              (evaln (cond->if x) y))) 

(define (eval expr env)
    (cond ((self-evaluation? expr) expr)
          ((variable? expr) (lookup-varable-value expr env))
          ((get 'op (car expr)) (apply (get 'op (car expr) expr env)))
          ((application? expr)
            (apply (eval (operator exp) env) (list-of-values (operands exp) env)))
          (else 
            (error "Unkown expression type -- EVAL" expr))
    )  
)